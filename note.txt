Connaitre la version de php dans le terminial:
php --version ou php -v

Changer la version de php dans les variables d'environnement:
...


Norme pour travailler en php: PSR (https://www.php-fig.org/psr/)

Autoloader php -> PSR4, implémenté par composer
    -> charger les classes php en utilisant leur namespace, quelque soit l'endroit ou la classe se trouve (avec un minimum de configuration)

Composer init -> permet de créer le fichier composer.json
Entre autre:
 -> permet de lister les dépendances du projets
 -> appliquer des contraintes sur la version de php ou sur les extensions php qui doivent être activées sur le serveur

MVC:

Model : représentation d'une table SQL (un jeux de données)
Vue : afficher les données (HTML, CSS, JS, PHP)
Controleur : Répartir les actions à réaliser (PHP)
    -> ex: Pour crypter un mot de passe le controleur appelera une classe dont le travaille est de crypter

composer update = mettre à jour les dépendances

php --help -> dans le terminal, permet d'afficher la liste des options disponibles pour la commande php

php -S localhost:8000 -> permet de créer un serveur web à l'aide de php

emmet.io : https://docs.emmet.io/
-> simplificateur d'écriture de syntaxe HTML

Les Services
 Ce sont classes php dans lesquelles on retrouve de la logique métier (code spécifique à notre projet)

Le Médiator (ex: Controller)
 Ce sont des classes dont le role est de mettre en relation plusieurs autres objets entre eux
 ex:
    - Créer un formulaire
    - Extraire des données de la bdd
    - Associer les données au formulaire
    - Tester la soumission du formulaire et valider les données

#! (shebang) --> permet d'executer un fichier dans un terminal à l'aide d'un executable renseigné (ex: php)
shebang ne fonctionne que sous un environnement unix !

Les webservices sont des applicatiopns qui mettent à disposition des ressources

REST:
1. S'appuie sur le protocole HTTP
    -> affiche un code HTTP adapté à la réponse
    ex:
        - 200 -> Réussi: OK
        - 204 -> Réussi: pas de contenu
        - 400 -> Erreur: mauvaise requête
        - 404 -> Erreur: non trouvé
        - 405 -> Erreur: méthode non autorisé

2. Utilise les urls pour accéder ou manipuler à une ressource [1 ressource = 1 url]
    ex: pour travailler avec la ressource produit
        -> lire toutes les données : /product
        -> ajouter une données : /product
        -> afficher 1 donnée : /product?id=1
3. Utiliser les verbs HTTP pour connaitre l'action à réaliser
    GET         -> lire
    POST        -> ajouter
    PUT/PATCH   -> modifier
    DELETE      -> supprimer

Les réponses d'un webservice Rest sont au format json(*) ou xml

JMS/Serializer -> permet de transformer un objet php en un objet json

Pour tester une API, on peut utiliser Postman (https://www.postman.com/)

SQL / NoSQL

SQL -> MySQL, MariaDB, MSSQL, PostgresSQL
NoSQL -> Mongodb
|__ Structure avec des documents (Ressource)
    |__ Structure sous forme d'objet JSON


Installer php Unit:
 - composer require --dev phpunit/phpunit
 -
